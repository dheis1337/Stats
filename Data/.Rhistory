81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48")
grid <- gsub(" ", "", grid)
grid <- gsub("\n", "", grid)
grid
pairseq
pairseq <- seq(from = 1, to = nchar(grid)/2, by = 2)
for (i in 1:nchar(grid)) {
pairs[i] <- substring(grid, first = pairseq[i], last = (pairseq[(i + 1)] - 1))
}
pairs
char(grid)
nchar(grid)
pairseq <- seq(from = 1, to = nchar(grid)/2, by = 2)
for (i in 1:nchar(grid)/2) {
pairs[i] <- substring(grid, first = pairseq[i], last = (pairseq[(i + 1)] - 1))
}
pairseq <- seq(from = 1, to = nchar(grid)/2, by = 2)
for (i in 1:(nchar(grid)/2)) {
pairs[i] <- substring(grid, first = pairseq[i], last = (pairseq[(i + 1)] - 1))
}
pairs
pairseq
pairseq <- seq(from = 1, to = nchar(grid)/2, by = 2)
for (i in 1:length(pairseq) {
pairs[i] <- substring(grid, first = pairseq[i], last = (pairseq[(i + 1)] - 1))
}
pairs <- vector("character", length = (nchar(grid) /2))
pairseq <- seq(from = 1, to = nchar(grid)/2, by = 2)
for (i in 1:length(pairseq)) {
pairs[i] <- substring(grid, first = pairseq[i], last = (pairseq[(i + 1)] - 1))
}
pairs
grid
nchar(grid)
pairseq[199]
grid[397]
pairseq <- seq(from = 1, to = nchar(grid), by = 2)
for (i in 1:length(pairseq)) {
pairs[i] <- substring(grid, first = pairseq[i], last = (pairseq[(i + 1)] - 1))
}
pairs
pairseq <- seq(from = 1, to = (nchar(grid) + 1), by = 2)
for (i in 1:length(pairseq)) {
pairs[i] <- substring(grid, first = pairseq[i], last = (pairseq[(i + 1)] - 1))
}
pairseq
pairs
pairseq <- seq(from = 1, to = (nchar(grid) + 2), by = 2)
for (i in 1:length(pairseq)) {
pairs[i] <- substring(grid, first = pairseq[i], last = (pairseq[(i + 1)] - 1))
}
pairs
pairseq
pairseq <- seq(from = 1, to = (nchar(grid) + 2), by = 2)
pairseq
pairseq <- seq(from = 1, to = (nchar(grid) + 3), by = 2)
pairseq
for (i in 1:length(pairseq)) {
pairs[i] <- substring(grid, first = pairseq[i], last = (pairseq[(i + 1)] - 1))
}
pairs
pairseq <- seq(from = 1, to = nchar(grid), by = 2)
for (i in 1:length(pairseq)) {
pairs[i] <- substring(grid, first = pairseq[i], last = (pairseq[(i + 1)] - 1))
}
pairs
grid <- c("08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48")
grid <- gsub(" ", "", grid)
grid <- gsub("\n", "", grid)
pairs <- vector("character", length = (nchar(grid) /2))
pairseq <- seq(from = 1, to = nchar(grid), by = 2)
for (i in 1:length(pairseq)) {
pairs[i] <- substring(grid, first = pairseq[i], last = (pairseq[(i + 1)] - 1))
}
pairs
pairs[400] <- substring(grid, first = (length(grid) - 1), last = length(grid))
pairs
length(grid)
pairs[400] <- substring(grid, first = (nchar(grid) - 1), last = nchar(grid))
pairs
as.numeric(pairs)
pairs <- as.numeric(pairs)
as.matrix(pairs)
as.matrix(pairs, nrow = 20)
?matrix
matrix(pairs, nrow = 20, ncol = 20, byrow = TRUE)
pairs <- matrix(pairs, nrow = 20, ncol = 20, byrow = TRUE)
pairs
pairs[, 1:4]
pairs[1:4, 1:4]
pairs[1:4, 1]
pairs[1, 1:4]
diag(pairs)
pairs[1, 1:4]
pairs
pairs
prods <- vector("numeric", length = 0)
prods <- vector("numeric", length = 0)
for (i in 1:nrow(pairs)) {
prods[i] <-  prod(pairs[i, i:(i + 3)])
}
nrow(pairs)
pairs[1, 4]
pairs[1, 1:4]
prod(pairs[1, 1:4])
prods <- vector("numeric", length = 0)
for (i in 1:nrow(pairs)) {
prods[i] <-  prod(pairs[i, i:(i+3)])
}
prods <- vector("numeric", length = 0)
for (i in 1:nrow(pairs)) {
for (j in 1:ncol(pairs))
prods[i] <-  prod(pairs[i, j:(j+3)])
}
}
prods <- vector("numeric", length = 0)
for (i in 1:nrow(pairs)) {
for (j in 1:ncol(pairs))
prods <-  c(prods, prod(pairs[i, j:(j+3)]))
}
}
prods <- vector("numeric", length = 0)
for (i in 1:nrow(pairs)) {
for (j in 1:ncol(pairs)) {
prods <-  c(prods, prod(pairs[i, j:(j+3)]))
}
}
prods <- vector("numeric", length = 0)
for (i in 1:(nrow(pairs) -3)) {
for (j in 1:(ncol(pairs) - 3)) {
prods <-  c(prods, prod(pairs[i, j:(j+3)]))
}
}
prods
for (i in 1:(nrow(pairs) -3)) {
for (j in 1:(ncol(pairs) - 3)) {
prods <-  c(prods, prod(pairs[j:(j+3), i]))
}
}
prods
diagonal <- diag(pairs)
products <- vector("numeric", length = 0)
for (i in 1:(nrow(pairs) -3)) {
for (j in 1:(ncol(pairs) - 3)) {
products <-  c(products, prod(pairs[i, j:(j+3)]))
}
}
for (i in 1:(nrow(pairs) -3)) {
for (j in 1:(ncol(pairs) - 3)) {
products <-  c(products, prod(pairs[j:(j+3), i]))
}
}
diagonal <- diag(pairs)
for(i in 1:(length(diagonal) - 3)) {
products <- c(products, prod(diagonal[i:(i + 3)]))
}
prods
products
max(products)
prod
prods
products <- vector("numeric", length = 0)
for (i in 1:(nrow(pairs) -3)) {
for (j in 1:(ncol(pairs) - 3)) {
products <-  c(products, prod(pairs[i, j:(j+3)]))
}
}
products
products <- vector("numeric", length = 0)
for (i in 1:(nrow(pairs) -3)) {
for (j in 1:ncol(pairs)) {
products <-  c(products, prod(pairs[i, j:(j+3)]))
}
}
products <- vector("numeric", length = 0)
for (i in 1:nrow(pairs) {
for (j in 1:(ncol(pairs) - 3)) {
products <-  c(products, prod(pairs[i, j:(j+3)]))
}
}
products
products <- vector("numeric", length = 0)
for (i in 1:nrow(pairs)) {
for (j in 1:(ncol(pairs) - 3)) {
products <-  c(products, prod(pairs[i, j:(j+3)]))
}
}
products
for (i in 1:nrow(pairs) {
for (j in 1:(ncol(pairs) - 3)) {
products <-  c(products, prod(pairs[j:(j+3), i]))
}
}
for (i in 1:nrow(pairs)) {
for (j in 1:(ncol(pairs) - 3)) {
products <-  c(products, prod(pairs[j:(j+3), i]))
}
}
products
diagonal <- diag(pairs)
for(i in 1:(length(diagonal) - 3)) {
products <- c(products, prod(diagonal[i:(i +)]))
}
for(i in 1:(length(diagonal) - 3)) {
products <- c(products, prod(diagonal[i:(i + 3)]))
}
products
max(products)
pairs[1, 2]
pairs
pairs[2, 2]
newdiag <- c(pairs[2, 1], pairs[3, 2], pairs[4, 3])
newdiag
t(pairs)
for (i in 1:(ncol(pairs) - 3)) {
products <- c(products, prod(c(pairs[i + 1, i], pairs[i + 2, i + 1], pairs[i + 3, i + 2], pairs[i + 4, i + 3])))
}
for (i in 1:(ncol(pairs) - 4)) {
products <- c(products, prod(c(pairs[i + 1, i], pairs[i + 2, i + 1], pairs[i + 3, i + 2], pairs[i + 4, i + 3])))
}
products
transpairs <- t(pairs)
for (i in 1:(ncol(pairs) - 4)) {
products <- c(products, prod(c(ranspairs[i + 1, i], transpairs[i + 2, i + 1],
transpairs[i + 3, i + 2], transpairs[i + 4, i + 3])))
}
transpairs <- t(pairs)
for (i in 1:(ncol(pairs) - 4)) {
products <- c(products, prod(c(transpairs[i + 1, i], transpairs[i + 2, i + 1],
transpairs[i + 3, i + 2], transpairs[i + 4, i + 3])))
}
products
max(products)
pairs
pairs[4, 1]
pairs[3, 2]
pairs[1, 4]
pairs[2, 3]
for (i in 1:(ncol(pairs) - 4)) {
products <- c(products, prod(c(pairs[i, i + 3], pairs[i + 1, i + 2], pairs[i + 2, i + 1],
pairs[i + 2, i])))
}
products
max(products)
ex1 <- 20.7/35
ex2 <- 21.9/35
hw1 <- 78.7/35
hw <- 91.8/100
hw1 <- 78.7/100
200(ex1 + ex2)
200 * (ex1 + ex2)
200 * (ex1 + ex2) + 50 * (hw1 + hw)
(200 * (ex1 + ex2) + 50 * (hw1 + hw))
(200 * (ex1 + ex2) + 50 * (hw1 + hw))/500
?rgamma
rgamma(n = 200, shape = 5, rate = 1/4)
gams <- rgamma(n = 200, shape = 5, rate = 1/4)
hist(gams)
plot(gams)
hist(gams)
plot.ecdf(gams)
rsamp <- rgamma(n = 200, shape = 5, rate = 1/4)
mean(rsamp)
sd(rsamp)
n <- 10^4
gam.boot <- vector("numeric", length = n)
gam.boot.mean <- vector("numeric", length = n)
n <- 10^4
gam.boot.mean <- vector("numeric", length = n)
for (i in 1:n) {
gam <- sample(rsamp, 200, replace = TRUE)
gam.boot.mean[i] <- mean(gam)
}
gam.boot.mean
hist(gam.boot.mean)
samp.means <- vector("numeric", length = n)
n <- 10^4
samp.means <- vector("numeric", length = n)
for (i in 1:n) {
gams <- rgamma(200, shape = 5, rate = 1/4)
samp.means[i] <- mean(gams)
}
hist(samp.means)
plot.ecdf(samp.means)
samp.mean <- mean(rsamp)
samp.sd <- sd(rsamp)
hist(samp.mean)
rsamp <- rgamma(n = 200, shape = 5, rate = 1/4)
samp.mean <- mean(rsamp)
samp.sd <- sd(rsamp)
hist(samp.mean)
hist(samp.mean)
samp.mean(rsamp)
hist(samp.mean)
samp.mean <- mean(rsamp)
hist(samp.mean)
hist(rsamp)
mean(rsamp)
sd(rsamp)
n <- 10^4
gam.boot.mean <- vector("numeric", length = n)
for (i in 1:n) {
gam <- sample(rsamp, 200, replace = TRUE)
gam.boot.mean[i] <- mean(gam)
}
hist(gam.boot.mean)
mean(gam.boot.mean)
sd(gam.boot.mean)
mean(sim.m)
n <- 10^4
sim.means <- vector("numeric", length = n)
for (i in 1:n) {
gams <- rgamma(200, shape = 5, rate = 1/4)
sim.means[i] <- mean(gams)
}
mean(sim.m)
mean(sim.means)
sd(sim.means)
fifty.samp <- vector("numeric", length = n)
fifty.mean <- vector("numeric", length = n)
rm(fifty.samp)
fifty.mean <- vector("numeric", length = n)
for (i in 1:n) {
gams <- rgamma(50, shape = 5, rate = 1/4)
fifty.mean <- mean(gams)
}
mean(fifty.mean)
sd(fifty.mean)
fifty.mean <- vector("numeric", length = n)
for (i in 1:n) {
gams <- rgamma(50, shape = 5, rate = 1/4)
fifty.mean[i] <- mean(gams)
}
sd(fifty.mean)
mean(fifty.mean)
fifty.samp <- rgamma(50, shape = 5, rate = 1/4)
mean(fifty.samp)
sd(fifty.samp)
fifty.boot <- vector("numeric", length = n)
for (i in 1:n) {
boot <- sample(fifty.samp, size = 50, replace = TRUE)
fifty.boot[i] <- mean(boot)
}
mean(fifty.boot)
sd(fifty.boot)
# sampling distribution of xbar
ten.mean <- vector("numeric", length = n)
for (i in 1:n) {
gams <- rgamma(10, shape = 5, rate = 1/4)
ten.mean[i] <- mean(gams)
}
ten.mean
mean(ten.mean)
sd(ten.mean)
ten.samp <- rgamma(10, shape = 5, rate = 1/4)
mean(ten.samp)
sd(ten.samp)
ten.boot <- vector("numeric", length = n)
for (i in 1:n) {
boot <- sample(ten.samp, size = 10, replace = TRUE)
ten.boot[i] <- mean(boot)
}
mean(ten.boot)
sd(ten.boot)
mean(fifty.boot)
rsamp <- rgamma(n = 200, shape = 5, rate = 1/4)
hist(rsamp)
rsamp <- rgamma(n = 200, shape = 5, rate = 1/4)
hist(rsamp)
rsamp <- rgamma(n = 200, shape = 5, rate = 1/4)
hist(rsamp)
rsamp <- rgamma(n = 200, shape = 5, rate = 1/4)
hist(rsamp)
rsamp <- rgamma(n = 200, shape = 5, rate = 1/4)
hist(rsamp)
setwd("C:/MyStuff/School/Math/Stats/Data")
books <- read.csv("BookPrices.csv")
names(book)
names(books)
head(books)
levels(books$Area)
ms <- books[books$Area == "Math & Science"]
ms <- books[books$Area == "Math & Science", ]
ms
ss <- books[books$Area == "Social Sciences", ]
ss
hist(ms)
ms <- books[books$Area == "Math & Science", ]$Price
ss <- books[books$Area == "Social Sciences", ]$Price
hist(ms)
hist(ss)
hist(ms)
mean(ms)
mean(ss)
median(ss)
mean(ms)
median(ms)
ms.boot <- vector("numeric", length = n)
for (i in 1:n) {
boot <- sample(ms, size = length(ms), replace = TRUE)
ms.boot[i] <- mean(boot)
}
hist(ms.boot)
ss.boot <- vector("numeric", length = n)
for (i in 1:n) {
boot <- sample(ss, size = length(ms), replace = TRUE)
ss.boot[i] <- mean(boot)
}
hist(ss.boot)
ratio.boot <- vector("numeric", length = n)
for (i in 1:n) {
ms.boot <- sample(ms, size = length(ms), replace = TRUE)
ss.boot <- sample(ss, size - length(ss), replace = TRUE)
ratio.boot[i] <- mean(ms.boot) / mean(ss.boot)
}
ratio.boot <- vector("numeric", length = n)
for (i in 1:n) {
ms.boot <- sample(ms, size = length(ms), replace = TRUE)
ss.boot <- sample(ss, size = length(ss), replace = TRUE)
ratio.boot[i] <- mean(ms.boot) / mean(ss.boot)
}
ratio.boot
hist(ratio.boot)
ss.boot
ss.boot <- vector("numeric", length = n)
for (i in 1:n) {
boot <- sample(ss, size = length(ms), replace = TRUE)
ss.boot[i] <- mean(boot)
}
ss.boot
hist(ss.boot)
mean(ss.boot)
ms.boot
ms.boot <- vector("numeric", length = n)
for (i in 1:n) {
boot <- sample(ms, size = length(ms), replace = TRUE)
ms.boot[i] <- mean(boot)
}
ms.boot
mean(ss.boot)
mean(ms.boot)
ratio.boot <- vector("numeric", length = n)
for (i in 1:n) {
ms.boot <- sample(ms, size = length(ms), replace = TRUE)
ss.boot <- sample(ss, size = length(ss), replace = TRUE)
ratio.boot[i] <- mean(ms.boot) / mean(ss.boot)
}
ss.boot
hist(ratio.boot)
mean(ms)
mean(ss)
quantile(ratio.boot, .025)
quantile(ratio.boot, .025, .975)
quantile(ratio.boot, c(.025, .975))
mean(ratio.boot)
mean(ratio.boot)[2]
quantile(ratio.boot, c(.025, .975))[2]
quantile(ratio.boot, c(.025, .975))[2] - mean(ratio.boot)
quantile(ratio.boot, c(.025, .975))[1] - mean(ratio.boot)
mean(ratio.boot)
ms.boot
mean(ms) / mean(ss)
mean(ratio.boot) - (mean(ms) / mean(ss))
bias <- mean(ratio.boot) - (mean(ms) / mean(ss))
bias / sd(ratio.boot)
(1.01)^40
(1.01)^80
(1.01)^256
(1.01)^120
(1.01)^140
100(1.01)^40
100*(1.01)^40
100*(1.01)^80
100*(1.01)^60
100*(1.01)^65
100*(1.01)^67
